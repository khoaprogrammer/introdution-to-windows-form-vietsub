1
00:00:01,000 --> 00:00:10,000
The first step in creating our code-only Windows Forms Application is to create the Visual Studio project.

2
00:00:10,000 --> 00:00:18,000
So over here in Visual Studio, I'll choose File, New, Project, and because I want this to be code-only,

3
00:00:18,000 --> 00:00:27,000
I'm going to use the Empty Project template. I'll name my project Simple, and then click OK.

4
00:00:27,000 --> 00:00:34,000
Now I want to create the class to represent our Windows Form, so I'll right-click on the project, and choose

5
00:00:34,000 --> 00:00:45,000
Add Class, and I'll call the class MyForm. And I want this class to inherit from System.Windows.Forms.Form.

6
00:00:45,000 --> 00:00:51,000
To be able to do that, I need to reference the System.Windows.Forms assembly, so I'll right-click on the

7
00:00:51,000 --> 00:00:59,000
project, choose Add Reference, make sure the Framework section is highlighted, and then scroll down to

8
00:00:59,000 --> 00:01:08,000
System.Windows.Forms, make sure that assembly is checked, and then click OK.

9
00:01:08,000 --> 00:01:14,000
With the assembly reference added, I can now add the line of code to indicate that my class inherits from form,

10
00:01:14,000 --> 00:01:25,000
so Inherits Form, and I'll just use the Ctrl . to add the Import statement for Systems.Windows.Forms.

11
00:01:25,000 --> 00:01:33,000
And then the last thing I need to do to my class is create the constructor, so that's Public Sub New(),

12
00:01:33,000 --> 00:01:39,000
and then inside of here set any properties I want for the form; and right now all that's set is the actual

13
00:01:39,000 --> 00:01:50,000
title of the form so that's the Text property, and I'll set that = "My Form".

14
00:01:50,000 --> 00:01:55,000
So that completes our form class. Now we need to add the main method, which is the entry point for our

15
00:01:55,000 --> 00:02:02,000
Visual Basic application. The main method goes inside of a module, so I'll right-click on the project,

16
00:02:02,000 --> 00:02:11,000
and choose Add Module, I'll call this module Startup, click Add, and then inside the module I'll create the

17
00:02:11,000 --> 00:02:28,000
main method, so that's Public Sub Main(), and now I need to create an instance of my form, so Dim form As New MyForm.

18
00:02:28,000 --> 00:02:34,000
And then, as I mentioned, I can use like form.Show, right there is a show method and show dialog method,

19
00:02:34,000 --> 00:02:42,000
but for the start-up form, which is what this form instance is going to be, we need to instead use

20
00:02:42,000 --> 00:02:50,000
Application; so this is a Singleton object, it lives in the System.Windows.Forms namespace, so again I'll

21
00:02:50,000 --> 00:02:58,000
use Ctrl . to add the Import statement we need, and then the method I want to call is Run, and then pass

22
00:02:58,000 --> 00:03:09,000
in my form object. So again, this does a few things. 1) It starts listening in on the Windows message loop,

23
00:03:09,000 --> 00:03:17,000
2) It sets this form object as the main form for the application, and then 3) It actually shows the form.

24
00:03:17,000 --> 00:03:29,000
So with this code complete, I can now press F5 to run the application, and there is our form.

25
00:03:29,000 --> 00:03:36,000
Just one note for those of you who are following along using C#, if I go over to the C# version of this project,

26
00:03:36,000 --> 00:03:41,000
so, Recent Projects, SimpleCS, and then press F5,

27
00:03:41,000 --> 00:03:46,000
you'll notice we our form, but we also get this console window behind it.

28
00:03:46,000 --> 00:03:55,000
So to alleviate that issue, we'll just go to the project, right-click, choose Properties, and then in the

29
00:03:55,000 --> 00:04:02,000
Application tab, just change the Output type from Console Application to Windows Application, save,

30
00:04:02,000 --> 00:59:00,000
and press F5 again, and now you just get the form showing up.

