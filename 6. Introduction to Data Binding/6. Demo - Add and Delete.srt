1
00:00:02,000 --> 00:00:12,000
In this demo we'll add Add and Delete functionality to our project that data binds to objects and memory.

2
00:00:12,000 --> 00:00:17,000
But before I get to that topic, let me review some of the changes I've made to the project.

3
00:00:17,000 --> 00:00:23,000
You'll notice I've added several controls here in the ToolStrip; right now the only control that's being used

4
00:00:23,000 --> 00:00:31,000
is this dropdown, which replaces the category dropdown that was here on the form earlier.

5
00:00:31,000 --> 00:00:39,000
I've also added a few controls, some labels, some TextBoxes, and a checkbox to more completely show the

6
00:00:39,000 --> 00:00:45,000
information for the currently selected product. And then taking a look at

7
00:00:45,000 --> 00:00:53,000
the code behind, I've changed the code here to bind the categories to now bind to the ComboBox that's in the

8
00:00:53,000 --> 00:01:01,000
ToolStrip; I've added the additional binding code to bind to the new controls that I have that show

9
00:01:01,000 --> 00:01:11,000
the product information. And also, when I bind the ListBox, I'm also binding the grid view or the data grid

10
00:01:11,000 --> 00:01:19,000
view control that's on the second tab of our tab control. So if I get out of full screen, and run the

11
00:01:19,000 --> 00:01:28,000
application, you'll see now my dropdown here has the categories. As I change the categories, the information

12
00:01:28,000 --> 00:01:35,000
in the ListBox still changes, and then as I scroll through the items in the ListBox, the information over

13
00:01:35,000 --> 00:01:42,000
here about the currently selected product also changes. And then finally now,

14
00:01:42,000 --> 00:01:51,000
our grid is bound here on the second tab.

15
00:01:51,000 --> 00:01:57,000
We'll begin the implementation of the Add and Delete functionality in our ObjectSource class.

16
00:01:57,000 --> 00:02:05,000
I want to have two methods, one to add a product and one to delete a product, and since we're just working

17
00:02:05,000 --> 00:02:11,000
with a collection here, that's pretty simple, the collection provides the functionality we need.

18
00:02:11,000 --> 00:02:18,000
So DeleteProduct just removes the product from the collection, AddProduct adds it.

19
00:02:18,000 --> 00:02:24,000
And now we can come back to our form and implement these two event handlers here, or the event handlers for

20
00:02:24,000 --> 00:02:33,000
these two buttons in the Toolbar, I'll start with Add. When the user clicks the Add button, I want to show

21
00:02:33,000 --> 00:02:41,000
the Add Product form, which I added to the project. It's a simple dialog form; it has some TextBoxes and a

22
00:02:41,000 --> 00:02:49,000
checkbox so the user can enter the information about a new product; there's no data binding going on here.

23
00:02:49,000 --> 00:02:56,000
And I have an OK and Cancel button, this is the form's accept button, this is the form's Cancel button,

24
00:02:56,000 --> 00:03:01,000
and both of these buttons have been setup to return the appropriate dialog result.

25
00:03:01,000 --> 00:03:04,000
In the code behind for the form,

26
00:03:04,000 --> 00:03:12,000
I take a category As a constructor, so this is the currently selected category, and I use that to show the

27
00:03:12,000 --> 00:03:21,000
category name in this read-only TextBox. I'll also need the category Id later, so I store that category

28
00:03:21,000 --> 00:03:28,000
object in a private field. And then to get the product information that the user entered, I have this

29
00:03:28,000 --> 00:03:37,000
property called Product. I create a new product based on the information in the user interface, and just

30
00:03:37,000 --> 00:03:47,000
return that to the caller. So coming back to the event handler, the first thing I want to do is get the

31
00:03:47,000 --> 00:03:59,000
currently selected category, so that's Dim category = CategoryToolStripComboBox.SelectedItem; it actually

32
00:03:59,000 --> 00:04:10,000
let me type this, so I'll do a cast and I'll cast that to a category.

33
00:04:10,000 --> 00:04:21,000
Then I'll create my dialog and show it, so Dim form As New AddProductForm, passing in category, and then

34
00:04:21,000 --> 00:04:39,000
Dim result = form.ShowDialog. And then If result = OK, then I want to add the product to the products collection,

35
00:04:39,000 --> 00:04:53,000
so that's _source.AddProduct passing in the product property of the form.

36
00:04:53,000 --> 00:04:59,000
And now we can implement the Delete event handler, so I'll come back up here and double-click on Delete,

37
00:04:59,000 --> 00:05:02,000
and here I want to get the selected product from the ListBox,

38
00:05:02,000 --> 00:05:22,000
so Dim product = CType(ProductsListBox.SelectedItem), I'm going to cast out to a product and then I want to

39
00:05:22,000 --> 00:05:33,000
call _source.DeleteProduct, passing in the product. Alright, so now we can test out our work, so I'll get

40
00:05:33,000 --> 00:05:43,000
out of full screen and I'll press F5, and then I'll pick, how about, Ipoh Coffee here, and I'll Delete,

41
00:05:43,000 --> 00:05:53,000
and then I'll pick Sasquatch Ale, and Delete. So notice nothing changed here, but if I force a rebind by

42
00:05:53,000 --> 00:06:02,000
changing the category, and then coming back to beverages, you'll notice that those two products aren't there.

43
00:06:02,000 --> 00:06:11,000
So the products were deleted from the collection, but the UI wasn't automatically updated to reflect those changes.

44
00:06:11,000 --> 00:06:18,000
Also if I add, so let's add, we'll call this guy Test, and the quantity per unit is just some text, and the

45
00:06:18,000 --> 00:06:28,000
unit price is 100, and the units on order is 10, and the units in stock is 20, and then click OK, again we

46
00:06:28,000 --> 00:06:39,000
don't see any changes here, but if I switch the category and then switch back, now we see the change there.

47
00:06:39,000 --> 00:06:45,000
So basically in the Add/Delete situation, the IList interface isn't providing the notifications needed for

48
00:06:45,000 --> 00:06:53,000
the UI to be able to update properly. Another piece of functionality we commonly want is the ability to

49
00:06:53,000 --> 00:07:00,000
navigate through this set of data. Now I can do this by using the ListBox here, just by selecting different

50
00:07:00,000 --> 00:07:06,000
items, but in a way that's kind of cheating, because it's the Click event on the ListBox that's changing

51
00:07:06,000 --> 00:07:11,000
the underlying pointer. What would happen if I only had these TextBoxes?

52
00:07:11,000 --> 00:07:18,000
I have really no way to navigate through the data set. So now let's introduce the use of the BindingSources

53
00:07:18,000 --> 00:59:00,000
and see how we can get this functionality with minimal changes.

